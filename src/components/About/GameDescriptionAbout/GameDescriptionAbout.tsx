// components/About/GameDescription/GameDescriptionAbout.jsx
import React, { useState, useEffect, useRef } from 'react';
import './GameDescriptionAbout.scss';

const GameDescriptionAbout = () => {
  const [isVisible, setIsVisible] = useState({
    intro: false,
    stats: false,
    features: false,
    summary: false
  });
  
  const [scrollPosition, setScrollPosition] = useState(0);

  const sectionRefs = {
    intro: useRef(null),
    stats: useRef(null),
    features: useRef(null),
    summary: useRef(null)
  };

  // Handle scroll for parallax effects
  useEffect(() => {
    const handleScroll = () => {
      setScrollPosition(window.scrollY);
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Intersection Observer to trigger animations when elements come into view
  useEffect(() => {
    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.15
    };

    const observerCallback = (entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const targetId = entry.target.getAttribute('data-section');
          if (targetId) {
            setIsVisible(prev => ({ ...prev, [targetId]: true }));
          }
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);

    Object.entries(sectionRefs).forEach(([key, ref]) => {
      if (ref.current) {
        observer.observe(ref.current);
      }
    });

    return () => {
      Object.values(sectionRefs).forEach(ref => {
        if (ref.current) {
          observer.unobserve(ref.current);
        }
      });
    };
  }, []);

  const features = [
    {
      icon: 'üéÆ',
      title: 'Interactive Gameplay',
      description: 'Take turns creating prompts and guessing what others have described, all with the help of AI-generated images.',
      color: 'rgba(99, 102, 241, 0.8)' // Primary color with opacity
    },
    {
      icon: 'ü§ñ',
      title: 'AI Integration',
      description: 'Powered by DALL-E, our game transforms your text prompts into stunning visual creations instantly.',
      color: 'rgba(139, 92, 246, 0.8)' // Secondary color with opacity
    },
    {
      icon: 'üèÜ',
      title: 'Competitive Fun',
      description: 'Earn points for accurate guesses and creative prompts, climbing the leaderboard as you play.',
      color: 'rgba(236, 72, 153, 0.8)' // Pink/accent with opacity
    },
    {
      icon: 'üë•',
      title: 'Social Experience',
      description: 'Connect with friends or make new ones in our vibrant community of creative minds.',
      color: 'rgba(16, 185, 129, 0.8)' // Success green with opacity
    }
  ];

  const calculateParallax = (multiplier = 1) => {
    return {
      transform: `translateY(${scrollPosition * 0.05 * multiplier}px)`
    };
  };

  return (
    <section className="game-description-about" id="game-description-about">
      <div className="game-description-about__bg-shapes">
        <div 
          className="game-description-about__shape game-description-about__shape--1"
          style={calculateParallax(0.3)}
        ></div>
        <div 
          className="game-description-about__shape game-description-about__shape--2"
          style={calculateParallax(-0.2)}
        ></div>
        <div 
          className="game-description-about__shape game-description-about__shape--3"
          style={calculateParallax(0.1)}
        ></div>
        <div 
          className="game-description-about__shape game-description-about__shape--4"
          style={calculateParallax(-0.15)}
        ></div>
      </div>
      
      <div className="container">
        <div className="game-description-about__header">
          <div className="game-description-about__badge">Discover GPTuessr</div>
          <h2 className="section-title">What is <span className="highlight">GPTuessr</span>?</h2>
          <p className="section-description">
            GPTuessr is an innovative online game that combines the creative power of AI with the fun of social guessing games. It&apos;s where imagination meets technology for an unparalleled gaming experience.
          </p>
        </div>
        
        <div 
          className={`game-description-about__content ${isVisible.intro ? 'is-visible' : ''}`}
          ref={sectionRefs.intro}
          data-section="intro"
        >
          <div className="game-description-about__text">
            <div className="game-description-about__text-block">
              <div className="game-description-about__text-icon">üí°</div>
              <p>
                Born from the idea that AI could enhance rather than replace human creativity, GPTuessr challenges players to describe images that will be generated by DALL-E, then have others guess what you described.
              </p>
            </div>
            
            <div className="game-description-about__text-block">
              <div className="game-description-about__text-icon">üîÑ</div>
              <p>
                Unlike traditional games, GPTuessr leverages cutting-edge AI technology to create a unique experience every time you play. No two rounds are ever the same, making each game session fresh and exciting.
              </p>
            </div>
            
            <div className="game-description-about__text-block">
              <div className="game-description-about__text-icon">üéØ</div>
              <p>
                Whether you&apos;re a casual gamer looking for fun, a creative mind seeking inspiration, or a tech enthusiast curious about AI applications, GPTuessr offers something for everyone.
              </p>
            </div>
          </div>
          
          <div 
            className={`game-description-about__stat-cards ${isVisible.stats ? 'is-visible' : ''}`}
            ref={sectionRefs.stats}
            data-section="stats"
          >
            <div className="game-description-about__stat-card">
              <div className="game-description-about__stat-icon">üë•</div>
              <div className="game-description-about__stat-number-container">
                <span className="game-description-about__stat-number" data-count="10000">10K+</span>
              </div>
              <span className="game-description-about__stat-label">Active Players</span>
            </div>
            
            <div className="game-description-about__stat-card">
              <div className="game-description-about__stat-icon">üñºÔ∏è</div>
              <div className="game-description-about__stat-number-container">
                <span className="game-description-about__stat-number" data-count="500000">500K+</span>
              </div>
              <span className="game-description-about__stat-label">Images Generated</span>
            </div>
            
            <div className="game-description-about__stat-card">
              <div className="game-description-about__stat-icon">‚≠ê</div>
              <div className="game-description-about__stat-number-container">
                <span className="game-description-about__stat-number" data-count="4.8">4.8</span>
              </div>
              <span className="game-description-about__stat-label">User Rating</span>
            </div>
            
            <div className="game-description-about__stat-card">
              <div className="game-description-about__stat-icon">üöÄ</div>
              <div className="game-description-about__stat-number-container">
                <span className="game-description-about__stat-number" data-count="2023">2023</span>
              </div>
              <span className="game-description-about__stat-label">Launched In</span>
            </div>
          </div>
        </div>
        
        <div 
          className={`game-description-about__features ${isVisible.features ? 'is-visible' : ''}`}
          ref={sectionRefs.features}
          data-section="features"
        >
          {features.map((feature, index) => (
            <div 
              className="game-description-about__feature" 
              key={index}
              style={{'--animation-delay': `${index * 0.15}s`, '--feature-color': feature.color}}
            >
              <div className="game-description-about__feature-icon-wrapper">
                <div className="game-description-about__feature-icon">{feature.icon}</div>
              </div>
              <h3 className="game-description-about__feature-title">{feature.title}</h3>
              <p className="game-description-about__feature-description">{feature.description}</p>
              <div className="game-description-about__feature-shine"></div>
            </div>
          ))}
        </div>
        
        <div 
          className={`game-description-about__summary ${isVisible.summary ? 'is-visible' : ''}`}
          ref={sectionRefs.summary}
          data-section="summary"
        >
          <div className="game-description-about__summary-content">
            <div className="game-description-about__summary-icon">‚ú®</div>
            <h3>Where Creativity Meets Technology</h3>
            <p>
              GPTuessr sits at the intersection of gaming, social interaction, and artificial intelligence. It&apos;s not just a game; it&apos;s a new way to engage with friends and technology alike.
            </p>
            <p>
              Join our community today and discover why thousands of players are making GPTuessr their go-to game for creative entertainment.
            </p>
            <a href="/signup" className="game-description-about__cta">
              <span>Join the Community</span>
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M5 12H19" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M12 5L19 12L12 19" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </section>
  );
};

export default GameDescriptionAbout;